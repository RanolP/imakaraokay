---
import Layout from '../../layouts/Layout.astro';
import ClickableTitleVariant from '../../components/clickable-title-variant';
import KaraokeBadges from '../../components/karaoke-badges';
import type { Song, Artist } from '../../types/song';
import { readFileSync } from 'fs';
import { resolve } from 'path';

export async function getStaticPaths() {
  // Load songs data from individual files organized by release year
  const knownYears = ['2018', '2019', '2020'];
  const songsByYear: { [key: string]: string[] } = {
    '2018': ['lemon'],
    '2019': ['yoru-ni-kakeru', 'gurenge'],
    '2020': ['dynamite'],
  };

  const songs: Song[] = [];

  for (const year of knownYears) {
    const songIds = songsByYear[year] || [];

    for (const songId of songIds) {
      try {
        const songPath = resolve(`./public/data/songs/${year}/${songId}.json`);
        const songData = readFileSync(songPath, 'utf-8');
        const song: Song = JSON.parse(songData);
        songs.push(song);
      } catch (error) {
        console.warn(`Failed to load song ${songId} from year ${year}:`, error);
      }
    }
  }

  // Load artists data from individual files organized by debut year
  const artistYears = ['2010', '2012', '2013', '2019'];
  const artistsByYear: { [key: string]: string[] } = {
    '2010': ['lisa'],
    '2012': ['kenshi-yonezu'],
    '2013': ['bts'],
    '2019': ['yoasobi'],
  };

  const artists: Artist[] = [];

  for (const year of artistYears) {
    const artistIds = artistsByYear[year] || [];

    for (const artistId of artistIds) {
      try {
        const artistPath = resolve(
          `./public/data/artists/${year}/${artistId}.json`,
        );
        const artistData = readFileSync(artistPath, 'utf-8');
        const artist: Artist = JSON.parse(artistData);
        artists.push(artist);
      } catch (error) {
        console.warn(
          `Failed to load artist ${artistId} from year ${year}:`,
          error,
        );
      }
    }
  }

  return songs.map((song) => ({
    params: { id: song.id },
    props: { song, artists },
  }));
}

interface Props {
  song: Song;
  artists: Artist[];
}

const { song, artists } = Astro.props;

// Helper function to get localized artist name
const getArtistDisplayName = (
  artistId: string,
  preferredLang: 'original' | 'japanese' | 'english' | 'korean' = 'original',
): string => {
  const artist = artists.find((a) => a.id === artistId);
  if (!artist) return artistId;

  if (preferredLang !== 'original' && artist.name[preferredLang]) {
    const langName = artist.name[preferredLang];
    if (langName && typeof langName === 'object' && 'main' in langName) {
      return langName.main;
    }
  }
  return artist.name.original;
};

// Generate title and description for SEO
const songTitle =
  typeof song.title === 'string' ? song.title : song.title.original;
const pageTitle = `${songTitle} - Karaoke Song Details`;
const description = `Find karaoke machine IDs for "${songTitle}". View lyrics and karaoke information for TJ, KY, and Joysound systems.`;

// Generate structured data for SEO
const structuredData = {
  '@context': 'https://schema.org',
  '@type': 'MusicComposition',
  name: songTitle,
  datePublished: song.releaseDate,
  lyrics: song.lyrics,
  additionalProperty: [
    {
      '@type': 'PropertyValue',
      name: 'TJ Karaoke ID',
      value: song.karaoke.tj,
    },
    {
      '@type': 'PropertyValue',
      name: 'KY Karaoke ID',
      value: song.karaoke.ky,
    },
    {
      '@type': 'PropertyValue',
      name: 'Joysound ID',
      value: song.karaoke.joysound,
    },
  ].filter((prop) => prop.value),
};
---

<Layout title={pageTitle} description={description}>
  <!-- Structured Data for SEO -->
  <script
    type="application/ld+json"
    set:html={JSON.stringify(structuredData)}
  />

  <div class="container mx-auto px-4 py-8 max-w-4xl">
    <div class="bg-white rounded-lg shadow-lg overflow-hidden">
      <!-- Song Header -->
      <div class="bg-gradient-to-r from-purple-600 to-blue-600 text-white p-6">
        <div
          class="flex flex-col md:flex-row md:items-center md:justify-between gap-4"
        >
          <div class="flex-1">
            <!-- Interactive title variant selector -->
            <ClickableTitleVariant song={song} client:load />

            <!-- Artists -->
            <div class="mt-2">
              <span class="text-sm opacity-75">Artists:</span>
              <span class="ml-2 text-lg">
                {
                  song.artists.map((artistId, index) => (
                    <>
                      <a
                        href={`/artists/${artistId}`}
                        class="text-white hover:text-blue-200 underline decoration-1 underline-offset-2 hover:decoration-2 transition-all"
                      >
                        {getArtistDisplayName(artistId, 'original')}
                      </a>
                      {index < song.artists.length - 1 && (
                        <span class="text-white">, </span>
                      )}
                    </>
                  ))
                }
              </span>
            </div>
          </div>
        </div>
      </div>

      <!-- Song Content -->
      <div class="p-6">
        <!-- Karaoke Machine IDs -->
        <div class="mb-8">
          <KaraokeBadges song={song} client:load />
        </div>

        <!-- Lyrics Section -->
        {
          song.lyrics && (
            <div class="mb-8">
              <h2 class="text-xl font-semibold text-gray-900 mb-4">
                üéµ Lyrics
              </h2>
              <div class="bg-gray-50 rounded-lg p-4">
                <pre class="whitespace-pre-wrap text-gray-700 font-mono text-sm leading-relaxed">
                  {song.lyrics}
                </pre>
              </div>
            </div>
          )
        }

        <!-- Additional Info -->
        {
          song.releaseDate && (
            <div class="text-sm text-gray-500 border-t pt-4">
              <span class="font-medium">Release Date:</span> {song.releaseDate}
            </div>
          )
        }
      </div>
    </div>

    <!-- Back to Search -->
    <div class="mt-8 text-center">
      <a
        href="/"
        class="inline-flex items-center px-6 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
      >
        ‚Üê Back to Search
      </a>
    </div>
  </div>
</Layout>
